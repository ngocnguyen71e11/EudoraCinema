
@model EudoraCinema.Models.PhimEntity
@{
    ViewBag.Title = "FilmInsert";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="~/css/phiminsertstyle.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
    <link href="~/Content/phiminsertstyle.css" rel="stylesheet" />
    <title>Insert</title>
</head>
<body>
    <header class="header"></header>
    <div class="un-head"></div>
    <div class="menu-back" style="display: flex;">
        <img class="img-logo" src="~/Image/logo.png" alt="">
        <div class="un-menu"></div>
        <div id="menu">
            <ul class="menu-khachhang">
                <li><a href="#" style="font-weight: 600;"><img src="~/Image/Icon.png" /> PHIM</a></li>
                <li><a href="#" style="font-weight: 600;"><img src="~/Image/Icon.png" /> NHÂN VIÊN</a></li>
                <li><a href="#" style="font-weight: 600;"><img src="~/Image/Icon.png" /> KHÁCH HÀNG</a></li>
                <li><a href="#" style="font-weight: 600;"><img src="~/Image/Icon.png" /> PHÒNG CHIẾU</a></li>
                <li><a href="#" style="font-weight: 600;"><img src="~/Image/Icon.png" /> HÓA ĐƠN</a></li>
            </ul>
        </div>
    </div>
    <div class="text-phim_describe">PHIM > CREATE</div>
    <main class="form-content">
        <form action="" style="width:100%;">
            <div class="form-film_around">
                <div class="content">
                    <h3>Thêm thông tin phim</h3>
                    <label for="">Tên phim: </label>
                    @Html.EditorFor(model => model.sTenphim, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sTenphim, "", new { @*@class = "text-danger"*@ })
                    <br />
                    <label>Thời lượng:</label>
                    @Html.EditorFor(model => model.sThoiluong, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sThoiluong, "", new { @*@class = "text-danger"*@ })
                    <br />
                    <label>Ngày khởi chiếu:</label>
                    @Html.EditorFor(model => model.dNgaykhoichieu, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.dNgaykhoichieu, "", new { @*@class = "text-danger"*@ })
                    <br />
                    <label>Đạo diễn:</label>
                    @Html.EditorFor(model => model.sDaodien, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sDaodien, "", new { @*@class = "text-danger"*@ })
                    <br>
                    <label for="">Diễn viên: </label>
                    @Html.EditorFor(model => model.sDienvien, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sDienvien, "", new { @*@class = "text-danger"*@ })

                </div>
                <div class="arr-ava">
                    <label for="">Ngôn ngữ: </label>
                    @Html.EditorFor(model => model.sNgonngu, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sNgonngu, "", new { @*@class = "text-danger"*@ })
                    <label for="">Mô tả: </label><br />

                    @Html.EditorFor(model => model.sMota, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sMota, "", new { @*@class = "text-danger"*@ })

                    <div class="form-ava">
                        @*<div id="view_img" class="ava"></div>*@
                        <input id="img_film" type="file" accept=".jpg, .png" class="btn-Phim_anh inp-file_img" placeholder="Chọn ảnh">
                        @*<div class="choose-ava"></div>*@
                        <div id="base64">
                            @Html.TextBoxFor(model => model.sAnh, new { htmlAttributes = new { placeholder = "Chọn ảnh", type = "Text",@class = "custom-file-input" } })
                        </div>
                        @*@Html.Value(ViewData["key"], new { placeholder = "Uploadt Your Passport", type = "file"})*@
                    </div>
                </div>
            </div>
            
            <div class="btn-phim_btn">
                <button type="submit" class="btn-Phim">Thêm</button>
                <button class="btn-Phim">Hủy</button>
            </div>
        </form>

    </main>
    <script>
        const fileUpload = document.getElementById('img_film');
        const base64 = document.getElementById('base64');
        const canvas = document.getElementById('view_img');
        document.getElementById('base64').style.display = 'none';
        //Taske a snapshort
        // Khởi tạo đối tượng FileReader
        const reader = new FileReader();

        // Lắng nghe trạng thái đăng tải tệp
        fileUpload.addEventListener("change", (event) => {
            // Lấy thông tin tập tin được đăng tải
            const files = event.target.files;

            // Đọc thông tin tập tin đã được đăng tải
            reader.readAsDataURL(files[0])

            // Lắng nghe quá trình đọc tập tin hoàn thành
            reader.addEventListener("load", (event) => {
                // Lấy chuỗi Binary thông tin hình ảnh
                const img = event.target.result;
                base64.innerHTML = img;
            })
        })

    </script>
</body>
</html>

